//
//  MacDirtyCowSwift.swift
//  MacDirtyCowSwift
//
//  Created by sourcelocation on 08/02/2023.
//

import Foundation

import UIKit

public class MDC {
    

    
    public enum MDCOverwriteError: Error, LocalizedError {
        case unknown
        case ram
        case corruption
        
        public var errorDescription: String? {
            switch self {
            case .unknown:
                return "MacDirtyCow exploit failed. Restart the app and try again."
            case .ram:
                return "OpenPicasso ran out of memory and for your safety disabled overwriting files using MacDirtyCow. Please close some apps running in background, reopen OpenPicasso and try again."
            case .corruption:
                return "⚠️IMPORTANT⚠️\nMacDirtyCow corrupted an asset catalog. This will lead to a bootloop if the steps are not followed. FOLLOW CAREFULLY: Close all your background apps, then reopen OpenPicasso for fixing. Then you can try again."
            }
        }
    }
    
    public static var isMDCSafe: Bool = true
    
    static var junk: [String] = []
    
    /// unlockDataAtEnd - Unlocked the data at overwrite end. Used when replacing files inside app bundle
    public static func overwriteFile(at path: String, with data: Data, unlockDataAtEnd: Bool = false, multipleIterations: Bool = false) throws {
//        junk.append(String(repeating: "a",  count: 50_000_000))
        
        if !isMDCSafe {
            throw MDCOverwriteError.ram
        }
        if multipleIterations {
            for i in 0...2 {
                print("[MDC] Running mdc i=\(i)")
                try overwriteFileWithDataImpl(originPath: path, replacementData: data, unlockDataAtEnd: unlockDataAtEnd)
            }
        } else {
            try overwriteFileWithDataImpl(originPath: path, replacementData: data, unlockDataAtEnd: unlockDataAtEnd)
        }
    }
    
}


//extension String: LocalizedError {
//    public var errorDescription: String? { return self }
//}
